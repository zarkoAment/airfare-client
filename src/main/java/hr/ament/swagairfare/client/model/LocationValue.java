/*
 * Flight Low-fare Search
 * # Introduction  The Flight Low-fare Search REST/JSON API is a traditional flight search API that enables you to find the best flight offers that match your search (one-way and round-trip) from a wide choice of airlines.  The result contains the flight details and will allow the user to select their preferred option based on either price or convenience. A wide range of search criteria can be applied to narrow the search results.  # Authorization  Before using the API you will need to get an access token. Please read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization)** for more information on how to get your token.  # Supported Operations  Resource: flight-offers  HTTP method: GET
 *
 * OpenAPI spec version: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package hr.ament.swagairfare.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * LocationValue
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-10-18T23:02:34.311+02:00")
public class LocationValue {
  /**
   * Location type: airport or city
   */
  public enum SubTypeEnum {
    AIRPORT("AIRPORT"),
    
    CITY("CITY");

    private String value;

    SubTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SubTypeEnum fromValue(String text) {
      for (SubTypeEnum b : SubTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("subType")
  private SubTypeEnum subType = null;

  @JsonProperty("detailedName")
  private String detailedName = null;

  public LocationValue subType(SubTypeEnum subType) {
    this.subType = subType;
    return this;
  }

   /**
   * Location type: airport or city
   * @return subType
  **/
  @ApiModelProperty(example = "AIRPORT", value = "Location type: airport or city")
  public SubTypeEnum getSubType() {
    return subType;
  }

  public void setSubType(SubTypeEnum subType) {
    this.subType = subType;
  }

  public LocationValue detailedName(String detailedName) {
    this.detailedName = detailedName;
    return this;
  }

   /**
   * Name of the location
   * @return detailedName
  **/
  @ApiModelProperty(example = "John F. Kennedy International Airport", value = "Name of the location")
  public String getDetailedName() {
    return detailedName;
  }

  public void setDetailedName(String detailedName) {
    this.detailedName = detailedName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationValue locationValue = (LocationValue) o;
    return Objects.equals(this.subType, locationValue.subType) &&
        Objects.equals(this.detailedName, locationValue.detailedName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subType, detailedName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationValue {\n");
    
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    detailedName: ").append(toIndentedString(detailedName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

